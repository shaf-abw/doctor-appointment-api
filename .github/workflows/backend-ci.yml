name: BACKEND-CI

# Trigger the workflow when push to main
on:
    push:
        branches:
            - main
    workflow_dispatch:

env:
  PROJECT_ID: ${{ secrets.GKE_PROJECT_ID }}
  GKE_CLUSTER: gksdadev001
  GKE_ZONE: us-central1-c

# Define the Jobs
jobs:
    build:

        # The OS which the pipeline will run
        runs-on: ubuntu-latest

        # Set Up MySQL Service
        services:
          mysql:
            image: mysql:8
            ports:
              - 3306:3306
            env:
              MYSQL_ROOT_PASSWORD: Shaf@123
              MYSQL_DATABASE: doctor_appointment
              MYSQL_USER: shafeeque
              MYSQL_PASSWORD: Shaf@123
            options: >-
              --health-cmd="mysqladmin ping --silent"
              --health-interval=10s
              --health-timeout=5s
              --health-retries=3

        # Define the steps in the build job
        steps:
            # step 1: Check out the code from the repo
            - name: Check out repository code
              uses: actions/checkout@master

            # Step 2: Set up JDK 17
            - name: Set up JDK 17
              uses: actions/setup-java@v4
              with:
                  distribution: 'zulu'
                  java-version: '17'
                  server-id: docker.io
                  server-username: MAVEN_USERNAME
                  server-password: MAVEN_PASSWORD  

            # Step 3: Cache Maven dependencies
            - name: Cache Maven dependencies
              uses: actions/cache@v3
              with:
                  path: ~/.m2/repository
                  key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
                  restore-keys: |
                      ${{ runner.os }}-maven-
                      
            # Step 4: Build and Push
            - name: Build and Push
              run: mvn package dockerfile:push --file pom.xml
              env:
                  MAVEN_USERNAME: ${{ secrets.DOCKER_USERNAME }}
                  MAVEN_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}

    Deploy:
        needs: build

        runs-on: ubuntu-latest

        steps:

            # Step 1: Check out the repository
            - name: Check out the repository
              uses: actions/checkout@master

            # Step 2: Set up GKE kubectl context
            - name: Set up GKE kubectl context
              run: |
                echo "${{ secrets.GKE_SA_KEY }}" | base64 --decode > "${HOME}/gke_key.json"
                gcloud auth activate-service-account --key-file="${HOME}/gke_key.json"
                gcloud container clusters get-credentials ${{ env.GKE_CLUSTER }} --zone ${{ env.GKE_ZONE }} --project ${{ env.PROJECT_ID }}

            # Step 3: Create Kubernetes Secret for Docker Hub (Image Pull Secret)
            - name: Create Docker Hub Image Pull Secret in Kubernetes
              run: |
                kubectl create secret docker-registry regcred \
                  --docker-username=${{ secrets.DOCKER_USERNAME }} \
                  --docker-password=${{ secrets.DOCKER_PASSWORD }} \
                  --docker-email=${{ secrets.DOCKER_EMAIL }} \
                  --dry-run=client -o yaml | kubectl apply -f -

            # Step 4: Deploy to GKE using kubectl
            - name: Deploy to GKE
              uses: ameydev/gke-kubectl-action@master
              env:
                PROJECT_ID: ${{ env.PROJECT_ID }}
                APPLICATION_CREDENTIALS: ${{ secrets.GKE_SA_KEY }}
                CLUSTER_NAME: ${{ env.GKE_CLUSTER }}
                ZONE_NAME: ${{ env.GKE_ZONE }}
              with:
                args: apply -f k8s/
